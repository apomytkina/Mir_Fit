package com.isomessage;

// The message which is generated by the FIT.
import com.imohsenb.ISO8583.exceptions.ISOException;
import com.imohsenb.ISO8583.utils.StringUtil;
import com.models.*;
import com.parsing.routing.Router;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.HashMap;

public class ObjectHexTranslator {

    /*
    Returns the transactionMessage-request [0100] as a hex-string.
    */
    public static String getEncodedMessage(ISOMessage isoMessage) throws ISOException {
        // Formation of the ParsedMessage.
        ParsedMessage parsedMessage = new ParsedMessage();
        parsedMessage.setMti("0100");
        parsedMessage.setEdited(true);
        // Getting of the parsed fields.
        ParsedField F2 = get_F2(isoMessage.getPrimaryAccountNumber());
        ParsedField F3 = get_F3(isoMessage.getProcessingCode());
        String amountTransactionStr = String.valueOf(isoMessage.getAmountTransaction());
        ParsedField F4 = get_F4(amountTransactionStr);
        ParsedField F12 = get_F12(isoMessage.getLocalTime());
        ParsedField F13 = get_F13(isoMessage.getLocalDate());
        ParsedField F42 = get_F42(isoMessage.getCardAcceptorIdentificationCode());
        ParsedField F63 = get_F63(isoMessage.getLocalTransactionNumber());
        // Setting of the parsed fields.
        HashMap<Integer, ParsedField> fields = new HashMap<>();
        fields.put(F2.getId(), F2);
        fields.put(F3.getId(), F3);
        fields.put(F4.getId(), F4);
        fields.put(F12.getId(), F12);
        fields.put(F13.getId(), F13);
        fields.put(F42.getId(), F42);
        fields.put(F63.getId(), F63);
        parsedMessage.setFields(fields);
        return Router.getEncodedMessage(parsedMessage);
    }

    /*
    Returns the transactionMessage-response [0110] as an ISOMessage object.
    */
    public static ISOMessage getISOMessage(String encodedMessage) throws ISOException {
        // Must be correct because is arrived from the core.
        ParsedMessage parsedMessage = Router.getParsedMessage(encodedMessage);
        ISOMessage isoMessage = new ISOMessage();
        // The mti.
        isoMessage.setMti(parsedMessage.getMti());
        HashMap<Integer, ParsedField> fields = parsedMessage.getFields();
        // The primaryAccountNumberInt.
        String F2_content = fields.get(2).getContent();
        isoMessage.setPrimaryAccountNumber(getStringOfIntValueFromString(F2_content));
        // The processingCode.
        String F3_content = fields.get(3).getContent();
        isoMessage.setProcessingCode(F3_content.substring(0, 2)); // The 1th subfield.
        // The amountTransaction.
        String F4_content = fields.get(4).getContent();
        isoMessage.setAmountTransaction(Long.parseLong(F4_content));
        // The cardAcceptorIdentificationCode.
        String F42_content = fields.get(42).getContent();
        isoMessage.setCardAcceptorIdentificationCode(getStringOfIntValueFromString(F42_content));
        // The localTransactionNumber.
        ParsedField F63 = fields.get(63);
        String F63_SubF2_content = F63.getSubfields().get(2).getContent();
        isoMessage.setLocalTransactionNumber(getStringOfIntValueFromString(F63_SubF2_content));
        // The transmissionDateAndTime.
        String F7_content = fields.get(7).getContent();
        isoMessage.setTransmissionDateAndTime(getTransmissionDateAndTime(F7_content));
        // The systemTraceAuditNumber.
        String F11_content = fields.get(11).getContent();
        isoMessage.setSystemTraceAuditNumber(getStringOfIntValueFromString(F11_content));
        // The globalTransactionNumber.
        String F37_content = fields.get(37).getContent();
        isoMessage.setGlobalTransactionNumber(getStringOfIntValueFromString(F37_content));
        return isoMessage;
    }

    static LocalDateTime getTransmissionDateAndTime(String F7_content) {
        // "MMDDhhmmss".
        int month = Integer.parseInt(F7_content.substring(0, 2));
        int day = Integer.parseInt(F7_content.substring(2, 4));
        int hours = Integer.parseInt(F7_content.substring(4, 6));
        int minutes = Integer.parseInt(F7_content.substring(6, 8));
        int seconds = Integer.parseInt(F7_content.substring(8, 10));
        return LocalDateTime.of(LocalDateTime.now().getYear(), month, day, hours, minutes, seconds);
    }

    static String getStringOfIntValueFromString(String content) {
        // Transformation through int is needed to delete except zeros.
        int ind = 0;
        while (content.charAt(ind) == '0')
            ind++;
        return content.substring(ind);
    }

    static ParsedField get_F2(String F2_content) {
        ParsedField F2 = new ParsedField();
        F2.setId(2);
        F2.setType("n");
        int length = F2_content.length();
        F2.setLengthMIP(length);
        if (length % 2 == 0)
            F2.setContent(F2_content);
        else
            F2.setContent("0" + F2_content);
        return F2;
    }

    static ParsedField get_F3(String SubF_1_content) {
        ParsedField F3 = new ParsedField();
        F3.setId(3);
        F3.setType("n");
        F3.setLengthMIP(6);
        // Subfield 1.
        ParsedSubfield parsedSubfield_1 = new ParsedSubfield();
        parsedSubfield_1.setId(1);
        parsedSubfield_1.setType("n");
        parsedSubfield_1.setLengthMIP(2);
        parsedSubfield_1.setContent(SubF_1_content);
        // Subfield 2.
        ParsedSubfield parsedSubfield_2 = new ParsedSubfield();
        parsedSubfield_2.setId(2);
        parsedSubfield_2.setType("n");
        parsedSubfield_2.setLengthMIP(2);
        parsedSubfield_2.setContent("00");
        // Subfield 3.
        ParsedSubfield parsedSubfield_3 = new ParsedSubfield();
        parsedSubfield_3.setId(3);
        parsedSubfield_3.setType("n");
        parsedSubfield_3.setLengthMIP(2);
        parsedSubfield_3.setContent("00");
        // Setting of the subfields.
        F3.setSubfield(parsedSubfield_1);
        F3.setSubfield(parsedSubfield_2);
        F3.setSubfield(parsedSubfield_3);
        F3.setHasSubfields(true);
        F3.setContent(SubF_1_content + "0000");
        return F3;
    }

    static ParsedField get_F4(String F4_content) {
        ParsedField F4 = new ParsedField();
        F4.setId(4);
        F4.setType("n");
        F4.setLengthMIP(12);
        // The content.
        StringBuilder content = new StringBuilder();
        while(F4_content.length() + content.length() < 12)
            content.append(0);
        content.append(F4_content);
        F4.setContent(content.toString());
        return F4;
    }

    static ParsedField get_F12(LocalTime localTime) {
        ParsedField F12 = new ParsedField();
        F12.setId(12);
        F12.setType("n");
        F12.setLengthMIP(6);
        // The content.
        StringBuilder content = new StringBuilder();
        // Hours.
        content.append(getDateTimeComponentStr(localTime.getHour()));
        // Minutes.
        content.append(getDateTimeComponentStr(localTime.getMinute()));
        // Seconds.
        content.append(getDateTimeComponentStr(localTime.getSecond()));
        F12.setContent(content.toString());
        return F12;
    }

    static ParsedField get_F13(LocalDate localDate) {
        ParsedField F13 = new ParsedField();
        F13.setId(13);
        F13.setType("n");
        F13.setLengthMIP(4);
        // The content.
        StringBuilder content = new StringBuilder();
        // The month.
        content.append(getDateTimeComponentStr(localDate.getMonthValue()));
        // The day.
        content.append(getDateTimeComponentStr(localDate.getDayOfMonth()));
        F13.setContent(content.toString());
        return F13;
    }

    /*
    Returns the time component (month/day/hours/minutes/seconds) as a string with the length = 2.
    */
    private static String getDateTimeComponentStr(int component) {
        String componentStr = String.valueOf(component);
        if (componentStr.length() == 2)
            return componentStr;
        else
            return "0" + componentStr;
    }

    static ParsedField get_F42(String F42_content) {
        ParsedField F42 = new ParsedField();
        F42.setId(42);
        F42.setType("ans");
        F42.setLengthMIP(15);
        // The content.
        StringBuilder content = new StringBuilder();
        while(F42_content.length() + content.length() < 15)
            content.append(0);
        content.append(F42_content);
        F42.setContent(content.toString());
        return F42;
    }

    static ParsedField get_F63(String F63_SubF2_content) {
        ParsedField F63 = new ParsedField();
        F63.setId(63);
        F63.setType("ans");
        F63.setLengthMIP(23);
        // Subfield 1.
        ParsedSubfield parsedSubfield_1 = get_F63_SubF1_default();
        // Subfield 2.
        ParsedSubfield parsedSubfield_2 = new ParsedSubfield();
        parsedSubfield_2.setId(2);
        parsedSubfield_2.setType("n");
        parsedSubfield_2.setLengthMIP(16);
        // The content of the 2th subfield.
        StringBuilder SubF2_content = new StringBuilder();
        while(F63_SubF2_content.length() + SubF2_content.length() < 16)
            SubF2_content.append(0);
        SubF2_content.append(F63_SubF2_content);
        parsedSubfield_2.setContent(SubF2_content.toString());
        // Subfield 3.
        ParsedSubfield parsedSubfield_3 = get_F63_SubF3_default();
        // Setting of the subfields.
        F63.setSubfield(parsedSubfield_1);
        F63.setSubfield(parsedSubfield_2);
        F63.setSubfield(parsedSubfield_3);
        F63.setHasSubfields(true);
        // In the hex format.
        F63.setContent("30303030" + parsedSubfield_2.getContent() + "303030");
        return F63;
    }

    static ParsedSubfield get_F63_SubF1_default() {
        ParsedSubfield parsedSubfield_1 = new ParsedSubfield();
        parsedSubfield_1.setId(1);
        parsedSubfield_1.setType("an");
        parsedSubfield_1.setLengthMIP(4);
        parsedSubfield_1.setContent("0000");
        return parsedSubfield_1;
    }

    static ParsedSubfield get_F63_SubF3_default() {
        ParsedSubfield parsedSubfield_3 = new ParsedSubfield();
        parsedSubfield_3.setId(3);
        parsedSubfield_3.setType("ans");
        parsedSubfield_3.setLengthMIP(3);
        parsedSubfield_3.setContent("000");
        return parsedSubfield_3;
    }
}
